last

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE 10000
#define MAX_CHAR 200

struct instruction_s {
  int step;
  int index;
};

char* get_word(char* s, int n)
{
    char *p = strtok(s, " .,!?\n\t\r");
    char *a;
    int wordcounter = 1;
    while (p != NULL){
      wordcounter++;
      p = strtok (NULL, " .,!?\n\t\r");
      if (wordcounter == n) {
        a = p;
      }
    }
    return a;
}

void get_sentence(char** lines, struct instruction_s* instructions,
int n_instructions, char* sentence){


  char *word;
  word = (char*)malloc(sizeof(char));
  for (int y = 0; y < n_instructions; y++) {
    int step = instructions[y].step;
    int index = instructions[y].index;
    word = get_word(, index);
    if (y < (n_instructions-1)) {
      strcpy(sentence,word);
      int a = strlen(sentence);
      sentence[a] = ' ';
    }else{
      strcpy(sentence,word);
      int a = strlen(sentence);
      sentence[a] = '\0';
    }
  }
  free(word);
  printf("%s\n", sentence);
}

int main()
{

  char last_sentence[MAX_CHAR];
  // Takes lines and stores them into array
  char line_s[MAX_LINE][MAX_CHAR];
  int lineN = 1;
  FILE *fp = fopen("alice.txt", "r");
  if (fp != NULL) {
    while (!feof(fp)) {
      while (lineN < MAX_LINE && fgets(line_s[lineN], MAX_CHAR, fp)){
       line_s[lineN][strlen(line_s[lineN])] = '\0';
       lineN = lineN + 1;
      }
    }
    fclose(fp);
  } else {
    printf("There is no alice.txt\n");
  }


  //Takes instructions lines and stores them into array
  struct instruction_s instArr[MAX_CHAR];
  int instN = 0;
  fp = fopen("capitals.txt", "r");
  if (fp != NULL ) {
    while (fscanf(fp, "%d %d", &instArr[instN].step, &instArr[instN].index) != EOF) {

      instN++;
    }
    fclose(fp);
  }

//Addition of each steps
  for (int x = 0; x < instN; x++) {
    if (x > 0) {
      instArr[x].step = instArr[x].step + instArr[x-1].step;
    }
  }

  // char **line_s_ptr2 = &line_s_ptr1;

  get_sentence(line_s_ptr1,instArr,instN,last_sentence);

  return EXIT_SUCCESS;
}
